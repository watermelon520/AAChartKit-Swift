//
//  ScrollingUpdateDataVC2.swift
//  AAInfographicsDemo
//
//  Created by AnAn on 2025/8/1.
//  Copyright ¬© 2025 An An. All rights reserved.
//

import UIKit
import AAInfographics

class XAxis: AAObject {
    var max: Any? // ‰ΩøÁî® Any? ÂÖÅËÆ∏‰º†ÂÖ• NSNull() Êàñ Double ÂÄº
}

class ScrollingUpdateDataVC2: AABaseChartVC {
    public var step: Bool?

    // ËÆ∞ÂΩï data Êï∞ÁªÑ‰∏≠ÁöÑÂÖÉÁ¥†‰∏™Êï∞
    private var dataCount: Int = 0
    // data Êï∞ÁªÑ‰∏≠ÁöÑÂÖÉÁ¥†ÊúÄÂ§öËÉΩÂêåÊó∂ÊòæÁ§∫ÁöÑÊï∞Èáè
    private let maxDataCount: Int = 20
    // Áî®‰∫éÂà§Êñ≠ÊòØÂê¶Â∑≤ÁªèËææÂà∞ÊúÄÂ§öËÉΩÂêåÊó∂ÊòæÁ§∫ÁöÑÊï∞Èáè
    private var isDataFull: Bool = false

    private var timer: Timer?

    
    override func viewDidLoad() {
        super.viewDidLoad()

        setupChartView()
        setupRefreshingChartTimer()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        timer?.invalidate()
        timer = nil
    }
    
    private func setupChartView() {
        let elements = getChartElement()

        let chartModel = AAChartModel()
            .chartType(.areaspline)
            .legendEnabled(false) // ÊòØÂê¶ÂêØÁî®ÂõæË°®ÁöÑÂõæ‰æã(ÂõæË°®Â∫ïÈÉ®ÁöÑÂèØÁÇπÂáªÁöÑÂ∞èÂúÜÁÇπ)
            .zoomType(.none) // ÊòØÂê¶ÂÖÅËÆ∏Áº©Êîæ
            .xAxisLabelsEnabled(true) // x ËΩ¥ÊòØÂê¶ÊòæÁ§∫Êï∞ÊçÆ
            .xAxisGridLineWidth(0) // x ËΩ¥ÁΩëÊ†ºÁ∫øÁöÑÂÆΩÂ∫¶
            .xAxisVisible(true) // x ËΩ¥ÊòØÂê¶ÊòæÁ§∫
            .yAxisVisible(true) // y ËΩ¥ÊòØÂê¶ÊòæÁ§∫
            .yAxisAllowDecimals(false) // y ËΩ¥ÊòØÂê¶ÂÖÅËÆ∏Â∞èÊï∞
            .yAxisGridLineWidth(1) // y ËΩ¥ÁΩëÊ†ºÁ∫øÁöÑÂÆΩÂ∫¶
            .dataLabelsEnabled(false) // ÊòØÂê¶ÊòæÁ§∫Êï∞ÊçÆÊ†áÁ≠æ
            .markerRadius(0) // ‰∏çÊòæÁ§∫ÁÇπ
            .tooltipEnabled(true) // ÊòØÂê¶ÊòæÁ§∫ÊµÆÂä®ÊèêÁ§∫Ê°Ü(ÈªòËÆ§ÊòæÁ§∫)
            .backgroundColor("#00000000")
            .legendEnabled(false) // ÊòØÂê¶ÊòæÁ§∫Âõæ‰æã
            .animationType(.linear)
            .animationDuration(1000)
            .yAxisMin(0)
            .yAxisMax(200)
            .series(elements)

        let aaOptions = chartModel.aa_toAAOptions()
        
        aaOptions.yAxis?
            .gridLineColor(AAColor.lightGray)
            .gridLineWidth(1)
            .gridLineDashStyle(.longDashDotDot)
            .labels?.style(AAStyle()
                .color(AAColor.gray)
                .fontSize(10))
        
        //Ëß£ÂºÄÊ≥®ÈáäÂàôÂèØ‰ª•ÊµãËØïËØ¶ÁªÜËá™ÂÆö‰πâ dataLabels Âíå marker ÁöÑÊ†∑Âºè
        /*
        aaOptions.plotOptions?.series?
            .dataLabels(AADataLabels()
                .enabled(true)
                .style(AAStyle()
                    .color(AAColor.white)
                    .fontSize(10)
                    .fontWeight(.thin))
                .format("{y:.2f}ÂÖÉ"))
            .marker(AAMarker()
                .radius(5)
                .symbol((AAChartSymbolType.circle.rawValue))
                .fillColor(AAColor.black)
                .lineWidth(1)
                .lineColor(AAColor.red))
        */
        
        aaOptions.xAxis?.max(Double(maxDataCount)) // ËÆæÁΩÆ x ËΩ¥ÁöÑÊúÄÂ§ßÂÄº‰∏∫ maxDataCount

        aaChartView?.aa_drawChartWithChartOptions(aaOptions)
    }
    
    private func setupRefreshingChartTimer() {
        // ËÆæÁΩÆÂÆöÊó∂Âô®ÔºåÂª∂Ëøü‰∏ÄÁßíÂêéÂºÄÂßãÊØèÁßíÊ∑ªÂä†‰∏Ä‰∏™Êï∞ÊçÆÁÇπ
        print("‚è±Ô∏è ËÆæÁΩÆÂÆöÊó∂Âô®ÔºåÊØèÁßíÊ∑ªÂä†‰∏Ä‰∏™Êï∞ÊçÆÁÇπ")
        let time: TimeInterval = 1.0
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + time) {
            self.timer = Timer.scheduledTimer(timeInterval: 1.0,
                                              target: self,
                                              selector: #selector(self.addPointToChartSeriesElement),
                                              userInfo: nil,
                                              repeats: true)
            self.timer?.fire()
        }
    }

    @objc private func addPointToChartSeriesElement() {
        print("üìä Ê∑ªÂä†Êñ∞Êï∞ÊçÆÁÇπÂπ∂Âà∑Êñ∞ÂõæË°®")
        // 1. ÁîüÊàêÊñ∞Êï∞ÊçÆÁÇπ
        let randomY = Float.random(in: (0 + 5) ... (200 - 5))
        let radomYDataElement = AADataElement()
            .y(randomY)
        
        
        // 2. Ê†πÊçÆÊï∞ÊçÆÊòØÂê¶Â∑≤Êª°ÔºåÂÜ≥ÂÆöÊòØÂê¶Âú®Ê∑ªÂä†Êñ∞ÁÇπÊó∂ÁßªÈô§ÊóßÁÇπ
        if dataCount == maxDataCount {
            let customXAxis = XAxis()
            customXAxis.max = NSNull() // ËÆæÁΩÆ x ËΩ¥ÁöÑÊúÄÂ§ßÂÄº‰∏∫Ëá™Âä®ËÆ°ÁÆó
            
            aaChartView?.aa_updateChart(options: customXAxis, redraw: false)
            isDataFull = true
        }
        

        // 3. Ë∞ÉÁî®‚ÄúÊ∑ªÂä†Âπ∂ÊªöÂä®‚ÄùÁöÑ‰∏ìÁî®ÊñπÊ≥ïÊù•Êõ¥Êñ∞ÂõæË°®
        aaChartView?.aa_addPointToChartSeriesElement(
            elementIndex: 0,
            options: radomYDataElement,
            redraw: true,
            shift: isDataFull, // ÂÖ≥ÈîÆÔºö‰ªÖÂú®Êï∞ÊçÆÊª°Êó∂ÊâçÊªöÂä®
            animation: true
        )
        print("üü¢ ÂΩìÂâçÊï∞ÊçÆÁÇπÊï∞Èáè: \(dataCount)")

        // 4. Êõ¥Êñ∞Êï∞ÊçÆËÆ°Êï∞
        dataCount = dataCount + 1
    }

    private func getChartElement() -> [AASeriesElement] {
        let gradientColor = AAGradientColor.linearGradient(
            direction: .toBottom,
            startColor: "#16D998fD",
            endColor: "#17E5A100"
        )
        
        let pointElement = AASeriesElement()
            .data([]) // ÂàùÂßãÊï∞ÊçÆ‰∏∫Á©∫
            .color("#16D998")
            .fillColor(gradientColor)
            .lineWidth(4)
            .fillOpacity(1)

        return [pointElement]
    }

}
